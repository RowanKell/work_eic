Timer unit: 1e-09 s

Total time: 37.4563 s
File: /tmp/ipykernel_588862/194171182.py
Function: newer_prepare_nn_input at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def newer_prepare_nn_input(processed_data = processed_data, normalizing_flow=model_compile, batch_size=50000, device='cuda',pixel_threshold = 5):
     2         1    2047995.0    2e+06      0.0      processer = SiPMSignalProcessor()
     3                                               
     4         1       1305.0   1305.0      0.0      all_context = []
     5         1        950.0    950.0      0.0      all_time_pixels = []
     6         1        934.0    934.0      0.0      all_metadata = []
     7         1       1950.0   1950.0      0.0      num_pixel_list = ["num_pixels_high_z","num_pixels_low_z"]
     8         1     131546.0 131546.0      0.0      print("Calculating # photons")
     9        11   18390370.0    2e+06      0.0      for event_idx, event_data in tqdm(processed_data.items()):
    10        36      71043.0   1973.4      0.0          for stave_idx, stave_data in event_data.items():
    11       164     223927.0   1365.4      0.0              for layer_idx, layer_data in stave_data.items():
    12      1237    1207284.0    976.0      0.0                  for segment_idx, segment_data in layer_data.items():
    13      1099     694878.0    632.3      0.0                      trueID_list = []
    14     17178   12297034.0    715.9      0.0                      for particle_id, particle_data in segment_data.items():
    15                                           #                         print(f"keys of particle data: {particle_data.keys()}")
    16                                           #                         print(f"types: {type(particle_data['z_pos'])},{type(particle_data['hittheta'])},{type(particle_data['hitmomentum'])}")
    17     32158  194269258.0   6041.1      0.5                          base_context = torch.tensor([particle_data['z_pos'], particle_data['hittheta'], particle_data['hitmomentum']], 
    18     16079    5109404.0    317.8      0.0                                                      dtype=torch.float32)
    19     32158  169152800.0   5260.1      0.5                          base_time_pixels_low = torch.tensor([particle_data['time'], particle_data['num_pixels_low_z']], 
    20     16079    4794820.0    298.2      0.0                                                          dtype=torch.float32)
    21     32158  165349894.0   5141.8      0.4                          base_time_pixels_high = torch.tensor([particle_data['time'], particle_data['num_pixels_high_z']], 
    22     16079    4716161.0    293.3      0.0                                                          dtype=torch.float32)
    23     16079    7744458.0    481.7      0.0                          if particle_data['trueID'] not in  trueID_list:
    24      1099    1416443.0   1288.8      0.0                              trueID_list.append(particle_data['trueID'])
    25     48237   38347702.0    795.0      0.1                          for SiPM_idx in range(2):
    26     32158   11157794.0    347.0      0.0                              z_pos = particle_data['z_pos']
    27     32158  177165365.0   5509.2      0.5                              context = base_context.clone()
    28     32158  187095060.0   5818.0      0.5                              context[0] = z_pos
    29     32158   11436660.0    355.6      0.0                              num_pixel_tag = num_pixel_list[SiPM_idx]
    30     32158  288780350.0   8980.0      0.8                              all_context.append(context.repeat(particle_data[num_pixel_tag], 1))
    31     32158   12993608.0    404.1      0.0                              if(SiPM_idx == 0):
    32     16079  126337102.0   7857.3      0.3                                  all_time_pixels.append(base_time_pixels_high.repeat(particle_data[num_pixel_tag], 1))
    33                                                                       else:
    34     16079  127892671.0   7954.0      0.3                                  all_time_pixels.append(base_time_pixels_low.repeat(particle_data[num_pixel_tag], 1))
    35                                                                       # Assuming particle_data is a dictionary-like object and trueID_list is defined
    36     32158   33581647.0   1044.3      0.1                              fields = [
    37                                                                           'truemomentum', 'trueID', 'truePID', 'hitID', 'hitPID', 
    38                                                                           'truetheta', 'truephi', 'strip_x', 'strip_y', 'strip_z', 
    39                                                                           'hit_x', 'hit_y', 'hit_z', 'KMU_trueID', 'KMU_truePID', 
    40                                                                           'KMU_true_phi', 'KMU_true_momentum_mag', 'KMU_endpoint_x', 
    41                                                                           'KMU_endpoint_y', 'KMU_endpoint_z'
    42                                                                       ]
    43                                           
    44                                                                       # Print types of each particle_data field
    45                                           #                             for field in fields:
    46                                           #                                 value = particle_data.get(field, None)
    47                                           #                                 print(f"{field}: {type(value)}")
    48                                           
    49                                           #                             # Print the type of len(trueID_list)
    50                                           #                             print(f"len(trueID_list): {type(len(trueID_list))}")
    51                                           
    52     32158  147512664.0   4587.1      0.4                              all_metadata.extend([(event_idx,stave_idx, layer_idx,segment_idx, SiPM_idx, particle_data['truemomentum'],particle_data['trueID'],particle_data['truePID'],particle_data['hitID'],particle_data['hitPID'],particle_data['truetheta'],particle_data['truephi'],particle_data['strip_x'],particle_data['strip_y'],particle_data['strip_z'],len(trueID_list),particle_data['hit_x'],particle_data['hit_y'],particle_data['hit_z'],particle_data['KMU_trueID'],particle_data['KMU_truePID'],particle_data['KMU_true_phi'],particle_data['KMU_true_momentum_mag'],particle_data['KMU_endpoint_x'],particle_data['KMU_endpoint_y'],particle_data['KMU_endpoint_z'])] * particle_data[num_pixel_tag])
    53                                           
    54         1   77171044.0    8e+07      0.2      all_context = torch.cat(all_context)
    55         1   81635004.0    8e+07      0.2      all_time_pixels = torch.cat(all_time_pixels)
    56                                               
    57         1     166564.0 166564.0      0.0      print("Sampling data...")
    58         1       1098.0   1098.0      0.0      sampled_data = []
    59         1       4170.0   4170.0      0.0      begin = time.time()
    60        22   45392954.0    2e+06      0.1      for i in tqdm(range(0, len(all_context), batch_size)):
    61        21     657059.0  31288.5      0.0          batch_end = min(i + batch_size, len(all_context))
    62        21   33494484.0    2e+06      0.1          batch_context = all_context[i:batch_end].to(device)
    63        21     502811.0  23943.4      0.0          batch_time_pixels = all_time_pixels[i:batch_end]
    64                                                   
    65        21     894692.0  42604.4      0.0          with torch.no_grad():
    66        21        1e+10    6e+08     34.1              samples = abs(normalizing_flow.sample(num_samples=len(batch_context), context=batch_context)[0]).squeeze(1)
    67                                                   
    68        21 2330294753.0    1e+08      6.2          sampled_data.extend(samples.cpu() + batch_time_pixels[:, 0])
    69         1       1894.0   1894.0      0.0      end = time.time()
    70         1      57449.0  57449.0      0.0      print(f"sampling took {end - begin} seconds")
    71         1      19508.0  19508.0      0.0      print("Processing signal...")
    72                                               
    73                                               
    74                                               # VARIABLES FOR SAVING DATA AS DF
    75         1     484147.0 484147.0      0.0      processer = SiPMSignalProcessor()
    76         1       1304.0   1304.0      0.0      rows = []
    77                                           
    78         1       1525.0   1525.0      0.0      seen_keys = set()
    79         1        736.0    736.0      0.0      curr_key = (-1,-1,-1,-1)
    80                                           
    81         1       2211.0   2211.0      0.0      current_samples = [[],[]] 
    82         1     252893.0 252893.0      0.0      processor = SiPMSignalProcessor()
    83                                           
    84         1        545.0    545.0      0.0      translated_trueID = 0
    85         1        309.0    309.0      0.0      trueID_dict_running_idx = 0
    86         1        597.0    597.0      0.0      trueID_dict = {}
    87                                           
    88         1       1286.0   1286.0      0.0      begin = time.time()
    89                                           
    90                                           #     sample_idx = 0
    91   1022506  549348969.0    537.3      1.5      for (event_idx,stave_idx, layer_idx,segment_idx, SiPM_idx, momentum,trueID,truePID,hitID,hitPID,theta,phi,strip_x,strip_y,strip_z,trueID_list_len,hit_x,hit_y,hit_z,KMU_trueID,KMU_truePID,KMU_true_phi,KMU_true_momentum_mag,KMU_endpoint_x,KMU_endpoint_y,KMU_endpoint_z), sample in zip(all_metadata, sampled_data):
    92                                           
    93                                                   #progress bar
    94                                           #         floor_percent = int(np.floor(len(sampled_data) / 100))
    95                                           #         if(sample_idx % floor_percent == 0):
    96                                           #             curr_time = time.time()
    97                                           #             print(f"Signal Processing is now {int(np.floor(sample_idx / len(sampled_data) * 100))}% complete (time elapsed: {curr_time - begin})")
    98                                           #             clear_output(wait = True)
    99                                           #         sample_idx += 1
   100                                           
   101                                                   # Work with all samples of one SiPM together
   102   1022505  523478059.0    512.0      1.4          key = (event_idx, stave_idx, layer_idx, segment_idx)
   103   1022505  353773505.0    346.0      0.9          if key in seen_keys:
   104   1021488  325279095.0    318.4      0.9              if key == curr_key:
   105   1021488  946252348.0    926.3      2.5                  current_samples[SiPM_idx].append(sample)
   106                                                       else:
   107                                                           continue
   108                                                           print(f"ERROR: key: {key} | curr_key: {curr_key}")
   109                                                   # First key
   110      1017     906342.0    891.2      0.0          elif curr_key == (-1,-1,-1,-1):
   111         1       2092.0   2092.0      0.0              current_samples[SiPM_idx].append(sample)
   112         1       1286.0   1286.0      0.0              seen_keys.add(key)
   113         1        438.0    438.0      0.0              curr_key = key
   114                                                   # End of curr_key: perform calc
   115                                                   else:
   116                                                       #calculate photon stuff on current_samples
   117                                           
   118                                                       '''IMPLEMENTING PREDICTION INPUT PULSE SEGMENT BY SEGMENT'''
   119      1016     481931.0    474.3      0.0              curr_event_idx = curr_key[0]
   120      1016     398175.0    391.9      0.0              curr_stave_idx = curr_key[1]
   121      1016     368605.0    362.8      0.0              curr_layer_idx = curr_key[2]
   122      1016     380906.0    374.9      0.0              curr_segment_idx = curr_key[3]
   123      3048    3836004.0   1258.5      0.0              for curr_SiPM_idx in range(2):
   124      2032     737995.0    363.2      0.0                  trigger = False
   125      2032 9159505429.0    5e+06     24.5                  photon_times = np.array(current_samples[curr_SiPM_idx]) * 10 **(-9)
   126      2032    2659087.0   1308.6      0.0                  if(len(photon_times) > 0):
   127      1877 8034977125.0    4e+06     21.5                      time_arr,waveform = processor.generate_waveform(photon_times)
   128      1877  363981677.0 193916.7      1.0                      timing = processer.get_pulse_timing(waveform,threshold = pixel_threshold)
   129      1877    1064913.0    567.3      0.0                      if(timing is not None):
   130                                                                   #scale inputs to avoid exploding gradients
   131      1269   61578192.0  48525.0      0.2                          curr_charge = processor.integrate_charge(waveform) * 1e6
   132      1269    1416343.0   1116.1      0.0                          curr_timing = timing * 1e8
   133      1269     671847.0    529.4      0.0                          trigger = True
   134                                                               #skip segments that don't pass the threshold
   135                                                               else:
   136                                                                   continue
   137                                                           #skip segments with no photon hits
   138                                                           else:
   139                                                               continue
   140      1269     599203.0    472.2      0.0                  if(trueID_list_len > 1):
   141                                                               translated_trueID = -1
   142                                                           else:
   143      1269    1990130.0   1568.3      0.0                      if((event_idx,trueID) not in trueID_dict):
   144        10       9805.0    980.5      0.0                          trueID_dict[(event_idx,trueID)] = trueID_dict_running_idx
   145        10       4605.0    460.5      0.0                          trueID_dict_running_idx += 1
   146      1269    1230825.0    969.9      0.0                      translated_trueID = trueID_dict[(event_idx,trueID)]
   147      1269    4614678.0   3636.5      0.0                  new_row = {
   148      1269     486558.0    383.4      0.0                      "event_idx"      : curr_event_idx,
   149      1269     500676.0    394.5      0.0                      "stave_idx"      : curr_stave_idx,
   150      1269     488110.0    384.6      0.0                      "layer_idx"      : curr_layer_idx,
   151      1269     564353.0    444.7      0.0                      "segment_idx"    : curr_segment_idx,
   152      1269     455350.0    358.8      0.0                      "SiPM_idx"    : curr_SiPM_idx,
   153      1269     454653.0    358.3      0.0                      "trueID"         : translated_trueID,
   154      1269     454858.0    358.4      0.0                      "truePID"        : trueID,
   155      1269     726284.0    572.3      0.0                      "hitID"          : hitID,
   156      1269     559049.0    440.5      0.0                      "P"              : momentum,
   157      1269     479897.0    378.2      0.0                      "Theta"          : theta,
   158      1269     543745.0    428.5      0.0                      "Phi"            : phi,
   159      1269     540174.0    425.7      0.0                      "strip_x"        : strip_z,
   160      1269     642470.0    506.3      0.0                      "strip_y"        : strip_x,
   161      1269     457050.0    360.2      0.0                      "strip_z"        : strip_y,
   162      1269     527106.0    415.4      0.0                      "hit_x"          : hit_x,
   163      1269     520316.0    410.0      0.0                      "hit_y"          : hit_y,
   164      1269     501588.0    395.3      0.0                      "hit_z"          : hit_z,
   165      1269     556314.0    438.4      0.0                      "KMU_endpoint_x" : KMU_endpoint_x,
   166      1269     549740.0    433.2      0.0                      "KMU_endpoint_y" : KMU_endpoint_y,
   167      1269     519789.0    409.6      0.0                      "KMU_endpoint_z" : KMU_endpoint_z,
   168      1269     481182.0    379.2      0.0                      "Charge"         : curr_charge,
   169      1269     503328.0    396.6      0.0                      "Time"           : curr_timing
   170                                                           }
   171      1269    1686448.0   1329.0      0.0                  rows.append(new_row)
   172                                                       ''' END IMPLEMENTATION '''
   173                                                       #reset current samples for new key
   174      1016    1757528.0   1729.9      0.0              seen_keys.add(key)
   175      1016    9427074.0   9278.6      0.0              current_samples = [[],[]]
   176      1016    1559802.0   1535.2      0.0              current_samples.append(sample)
   177      1016     383969.0    377.9      0.0              curr_key = key
   178                                           
   179                                           
   180         1       3122.0   3122.0      0.0      end = time.time()
   181         1   10081814.0    1e+07      0.0      ret_df = pd.DataFrame(rows)
   182         1     143201.0 143201.0      0.0      print(f"Creating DF took {end - begin} seconds")
   183         1        298.0    298.0      0.0      return ret_df

