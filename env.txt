SHELL=/bin/bash
SLURM_JOB_USER=rck32
SLURM_TASKS_PER_NODE=1
SLURM_JOB_UID=1448069
HISTCONTROL=ignoreboth
SLURM_EXPORT_ENV=NONE
SLURM_TASK_PID=1317206
CONDA_EXE=/hpc/group/vossenlab/rck32/miniconda3/bin/conda
_CE_M=
__MODULES_LMALTNAME=Anaconda3/2021.05&as|Anaconda3/default&as|Anaconda3/latest
SLURM_LOCALID=0
SLURM_SUBMIT_DIR=/hpc/group/vossenlab/rck32/eic/work_eic/slurm
HOSTNAME=dcc-vossenlab-gpu-03
HISTSIZE=1000
SLURMD_NODENAME=dcc-vossenlab-gpu-03
SLURM_JOB_START_TIME=1716238632
SLURM_NODE_ALIASES=(null)
SLURM_CLUSTER_NAME=dcc
SLURM_JOB_END_TIME=1724014632
SLURM_CPUS_ON_NODE=1
CONFIG_FILE=/hpc/home/rck32/ondemand/data/sys/dashboard/batch_connect/sys/bc_jupyter/output/ad3a2d00-2162-44a3-adf7-6da480998574/config.py
SLURM_JOB_CPUS_PER_NODE=1
SACCT_FORMAT=user%8,JobID%16,state%12,partition%15,start,elapsed%10,nodelist%20,MaxRss%10,ReqMem%6,NCPUS%4,ExitCode,Workdir%110
PWD=/hpc/group/vossenlab/rck32/eic
SLURM_GTIDS=0
LOGNAME=rck32
CONDA_PREFIX=/hpc/group/vossenlab/rck32/miniconda3
SLURM_JOB_PARTITION=vossenlab-gpu
MODULESHOME=/usr/share/Modules
JUPYTER_SERVER_URL=http://localhost:5396/node/dcc-core-02/5396/
MANPATH=:/opt/puppetlabs/puppet/share/man
SLURM_JOB_NUM_NODES=1
SLURM_JOBID=9136775
SLURM_JOB_QOS=normal
FAMILY=almalinux
LINES=46
HOME=/hpc/home/rck32
SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass
LANG=en_US.UTF-8
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
port=5396
__MODULES_LMCONFLICT=Anaconda3/2021.05&Anaconda3
SLURM_PROCID=0
COLUMNS=222
CONDA_PROMPT_MODIFIER=(base) 
TMPDIR=/tmp
SLURM_CPUS_PER_TASK=1
SLURM_NTASKS=1
SLURM_TOPOLOGY_ADDR=dcc-vossenlab-gpu-03
SSI_VERSION=9.3
SLURM_TOPOLOGY_ADDR_PATTERN=node
SLURM_MEM_PER_NODE=8192
SLURM_WORKING_CLUSTER=dcc:dcc-sched-01:6817:9984:109
JUPYTER_SERVER_ROOT=/hpc/home/rck32
PYTHONPATH=/opt/apps/rhel8/Anaconda3-2021.05
TERM=xterm
_CE_CONDA=
LESSOPEN=||/usr/bin/lesspipe.sh %s
USER=rck32
SLURM_NODELIST=dcc-vossenlab-gpu-03
ENVIRONMENT=BATCH
CONDA_SHLVL=1
MODULES_RUN_QUARANTINE=LD_LIBRARY_PATH LD_PRELOAD
LOADEDMODULES=Anaconda3/2021.05
SLURM_JOB_ACCOUNT=vossenlab
SLURM_PRIO_PROCESS=0
SLURM_NPROCS=1
SHLVL=4
SLURM_NNODES=1
PYXTERM_DIMENSIONS=80x25
SLURM_SUBMIT_HOST=dcc-core-02
CONDA_PYTHON_EXE=/hpc/group/vossenlab/rck32/miniconda3/bin/python
SLURM_JOB_ID=9136775
SLURM_NODEID=0
S_COLORS=auto
CONDA_DEFAULT_ENV=base
DEBUGINFOD_URLS=https://debuginfod.centos.org/ 
which_declare=declare -f
host=dcc-core-02
XDG_DATA_DIRS=/hpc/home/rck32/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share
SLURM_CONF=/var/spool/slurmd/conf-cache/slurm.conf
PATH=/opt/conda/bin:/opt/apps/rhel8/Anaconda3-2021.05/bin:/hpc/group/vossenlab/rck32/miniconda3/bin:/hpc/group/vossenlab/rck32/miniconda3/condabin:/opt/conda/bin:/hpc/home/rck32/.local/bin:/hpc/home/rck32/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/puppetlabs/bin:/opt/slurm/bin
SLURM_JOB_NAME=KLM_sim
MODULEPATH=/opt/apps/modulefiles
_LMFILES_=/opt/apps/modulefiles/Anaconda3/2021.05
MAIL=/var/spool/mail/rck32
SLURM_GET_USER_ENV=1
SLURM_JOB_GID=1000000
OLDPWD=/hpc/home/rck32/groupdir/eic/work_eic/slurm
SLURM_JOB_NODELIST=dcc-vossenlab-gpu-03
MODULES_CMD=/usr/share/Modules/libexec/modulecmd.tcl
BASH_FUNC_ml%%=() {  module ml "$@"
}
BASH_FUNC_find_port%%=() {  local host="${1:-localhost}";
 local port=$(random_number "${2:-2000}" "${3:-65535}");
 while port_used "${host}:${port}"; do
 port=$(random_number "${2:-2000}" "${3:-65535}");
 done;
 echo "${port}"
}
BASH_FUNC_which%%=() {  ( alias;
 eval ${which_declare} ) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot $@
}
BASH_FUNC_create_passwd%%=() {  tr -cd 'a-zA-Z0-9' < /dev/urandom 2> /dev/null | head -c${1:-8}
}
BASH_FUNC_random_number%%=() {  shuf -i ${1}-${2} -n 1
}
BASH_FUNC_module%%=() {  local _mlredir=1;
 if [ -n "${MODULES_REDIRECT_OUTPUT+x}" ]; then
 if [ "$MODULES_REDIRECT_OUTPUT" = '0' ]; then
 _mlredir=0;
 else
 if [ "$MODULES_REDIRECT_OUTPUT" = '1' ]; then
 _mlredir=1;
 fi;
 fi;
 fi;
 case " $@ " in 
 *' --no-redirect '*)
 _mlredir=0
 ;;
 *' --redirect '*)
 _mlredir=1
 ;;
 esac;
 if [ $_mlredir -eq 0 ]; then
 _module_raw "$@";
 else
 _module_raw "$@" 2>&1;
 fi
}
BASH_FUNC_wait_until_port_used%%=() {  local port="${1}";
 local time="${2:-30}";
 for ((i=1; i<=time*2; i++))
 do
 port_used "${port}";
 port_status=$?;
 if [ "$port_status" == "0" ]; then
 return 0;
 else
 if [ "$port_status" == "127" ]; then
 echo "commands to find port were either not found or inaccessible.";
 echo "command options are lsof, nc, bash's /dev/tcp, or python (or python3) with socket lib.";
 return 127;
 fi;
 fi;
 sleep 0.5;
 done;
 return 1
}
BASH_FUNC__module_raw%%=() {  eval "$(/usr/bin/tclsh '/usr/share/Modules/libexec/modulecmd.tcl' bash "$@")";
 _mlstatus=$?;
 return $_mlstatus
}
BASH_FUNC_port_used%%=() {  local port="${1#*:}";
 local host=$((expr "${1}" : '\(.*\):' || echo "localhost") | awk 'END{print $NF}');
 local port_strategies=(port_used_nc port_used_lsof port_used_bash port_used_python port_used_python3);
 for strategy in ${port_strategies[@]};
 do
 $strategy $host $port;
 status=$?;
 if [[ "$status" == "0" ]] || [[ "$status" == "1" ]]; then
 return $status;
 fi;
 done;
 return 127
}
BASH_FUNC_source_helpers%%=() {  function random_number () 
 { 
 shuf -i ${1}-${2} -n 1
 };
 export -f random_number;
 function port_used_python () 
 { 
 python -c "import socket; socket.socket().connect(('$1',$2))" > /dev/null 2>&1
 };
 function port_used_python3 () 
 { 
 python3 -c "import socket; socket.socket().connect(('$1',$2))" > /dev/null 2>&1
 };
 function port_used_nc () 
 { 
 nc -w 2 "$1" "$2" < /dev/null > /dev/null 2>&1
 };
 function port_used_lsof () 
 { 
 lsof -i :"$2" > /dev/null 2>&1
 };
 function port_used_bash () 
 { 
 local bash_supported=$(strings /bin/bash 2>/dev/null | grep tcp);
 if [ "$bash_supported" == "/dev/tcp/*/*" ]; then
 ( : < /dev/tcp/$1/$2 ) > /dev/null 2>&1;
 else
 return 127;
 fi
 };
 function port_used () 
 { 
 local port="${1#*:}";
 local host=$((expr "${1}" : '\(.*\):' || echo "localhost") | awk 'END{print $NF}');
 local port_strategies=(port_used_nc port_used_lsof port_used_bash port_used_python port_used_python3);
 for strategy in ${port_strategies[@]};
 do
 $strategy $host $port;
 status=$?;
 if [[ "$status" == "0" ]] || [[ "$status" == "1" ]]; then
 return $status;
 fi;
 done;
 return 127
 };
 export -f port_used;
 function find_port () 
 { 
 local host="${1:-localhost}";
 local port=$(random_number "${2:-2000}" "${3:-65535}");
 while port_used "${host}:${port}"; do
 port=$(random_number "${2:-2000}" "${3:-65535}");
 done;
 echo "${port}"
 };
 export -f find_port;
 function wait_until_port_used () 
 { 
 local port="${1}";
 local time="${2:-30}";
 for ((i=1; i<=time*2; i++))
 do
 port_used "${port}";
 port_status=$?;
 if [ "$port_status" == "0" ]; then
 return 0;
 else
 if [ "$port_status" == "127" ]; then
 echo "commands to find port were either not found or inaccessible.";
 echo "command options are lsof, nc, bash's /dev/tcp, or python (or python3) with socket lib.";
 return 127;
 fi;
 fi;
 sleep 0.5;
 done;
 return 1
 };
 export -f wait_until_port_used;
 function create_passwd () 
 { 
 tr -cd 'a-zA-Z0-9' < /dev/urandom 2> /dev/null | head -c${1:-8}
 };
 export -f create_passwd
}
_=/usr/bin/env
